// generated 2004/2/8 21:52:22 CET by newmark@molly.(none)
// using glademm V2.0.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/newmark/devel/CyberDeck/thegame/interface/cyberdeck.glade
// for gtk 2.2.4 and gtkmm 2.2.7
//
// Please modify the corresponding derived classes in ./src/main.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#else
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif
#include "main_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/imagemenuitem.h>
#include <gtk/gtkimagemenuitem.h>
#include <gtkmm/menuitem.h>
#include <gtkmm/menu.h>
#include <gtkmm/menubar.h>
#include <gtkmm/fixed.h>
#include <gtkmm/label.h>
#include <gtkmm/box.h>
#include <gtkmm/notebook.h>

main_glade::main_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  
   
   Gtk::Window *main = this;
   gmm_data = new GlademmData(get_accel_group());
   
   Gtk::ImageMenuItem *new1 = NULL;
   Gtk::ImageMenuItem *open1 = NULL;
   Gtk::ImageMenuItem *save1 = NULL;
   Gtk::ImageMenuItem *save_as1 = NULL;
   Gtk::MenuItem *separatormenuitem1 = NULL;
   Gtk::ImageMenuItem *quit1 = NULL;
   Gtk::Menu *menu1 = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *menuitem1 = NULL;
   Gtk::ImageMenuItem *cut1 = NULL;
   Gtk::ImageMenuItem *copy1 = NULL;
   Gtk::ImageMenuItem *paste1 = NULL;
   Gtk::ImageMenuItem *delete1 = NULL;
   Gtk::Menu *menu2 = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *menuitem2 = NULL;
   Gtk::Menu *menu3 = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *menuitem3 = NULL;
   Gtk::MenuItem *about1 = NULL;
   Gtk::Menu *menu4 = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *menuitem4 = NULL;
   Gtk::MenuBar *menubar1 = Gtk::manage(new class Gtk::MenuBar());
   Gtk::Fixed *option_area = Gtk::manage(new class Gtk::Fixed());
   Gtk::Label *Option = Gtk::manage(new class Gtk::Label(_("Option")));
   Gtk::Fixed *card_explain = Gtk::manage(new class Gtk::Fixed());
   Gtk::Fixed *deck_your = Gtk::manage(new class Gtk::Fixed());
   Gtk::HBox *hbox2 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Fixed *deck_list = Gtk::manage(new class Gtk::Fixed());
   Gtk::VBox *vbox3 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::Label *Deck = Gtk::manage(new class Gtk::Label(_("Deck")));
   Gtk::Fixed *user_info_space = Gtk::manage(new class Gtk::Fixed());
   Gtk::Fixed *user_deck_space = Gtk::manage(new class Gtk::Fixed());
   Gtk::HBox *hbox3 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Fixed *user_some_space = Gtk::manage(new class Gtk::Fixed());
   Gtk::VBox *vbox4 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::Label *User = Gtk::manage(new class Gtk::Label(_("User")));
   Gtk::Fixed *opn_deck_area = Gtk::manage(new class Gtk::Fixed());
   Gtk::Fixed *comm_deck_area = Gtk::manage(new class Gtk::Fixed());
   Gtk::Fixed *owner_deck_area = Gtk::manage(new class Gtk::Fixed());
   Gtk::VBox *card_area = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::Fixed *fixed4 = Gtk::manage(new class Gtk::Fixed());
   Gtk::HBox *hbox1 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *Network = Gtk::manage(new class Gtk::Label(_("Network")));
   Gtk::Notebook *notebook1 = Gtk::manage(new class Gtk::Notebook());
   Gtk::VBox *vbox1 = Gtk::manage(new class Gtk::VBox(false, 0));
   
   menu1->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-new")));
   new1 = (Gtk::ImageMenuItem *)&menu1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-open")));
   open1 = (Gtk::ImageMenuItem *)&menu1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-save")));
   save1 = (Gtk::ImageMenuItem *)&menu1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-save-as")));
   save_as1 = (Gtk::ImageMenuItem *)&menu1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   separatormenuitem1 = (Gtk::MenuItem *)&menu1->items().back();
   
   menu1->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-quit")));
   quit1 = (Gtk::ImageMenuItem *)&menu1->items().back();
   
   menu2->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-cut")));
   cut1 = (Gtk::ImageMenuItem *)&menu2->items().back();
   
   menu2->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-copy")));
   copy1 = (Gtk::ImageMenuItem *)&menu2->items().back();
   
   menu2->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-paste")));
   paste1 = (Gtk::ImageMenuItem *)&menu2->items().back();
   
   menu2->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-delete")));
   delete1 = (Gtk::ImageMenuItem *)&menu2->items().back();
   
   menu4->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_About")));
   about1 = (Gtk::MenuItem *)&menu4->items().back();
   
   menubar1->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_File"), *menu1));
   menuitem1 = (Gtk::MenuItem *)&menubar1->items().back();
   
   menubar1->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_Edit"), *menu2));
   menuitem2 = (Gtk::MenuItem *)&menubar1->items().back();
   
   menubar1->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_View"), *menu3));
   menuitem3 = (Gtk::MenuItem *)&menubar1->items().back();
   
   menubar1->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_Help"), *menu4));
   menuitem4 = (Gtk::MenuItem *)&menubar1->items().back();
   Option->set_alignment(0.5,0.5);
   Option->set_padding(0,0);
   Option->set_justify(Gtk::JUSTIFY_CENTER);
   Option->set_line_wrap(false);
   Option->set_use_markup(false);
   Option->set_selectable(false);
   hbox2->pack_start(*card_explain);
   hbox2->pack_start(*deck_your);
   vbox3->pack_start(*hbox2);
   vbox3->pack_start(*deck_list);
   Deck->set_alignment(0.5,0.5);
   Deck->set_padding(0,0);
   Deck->set_justify(Gtk::JUSTIFY_CENTER);
   Deck->set_line_wrap(false);
   Deck->set_use_markup(false);
   Deck->set_selectable(false);
   hbox3->pack_start(*user_info_space);
   hbox3->pack_start(*user_deck_space);
   vbox4->pack_start(*hbox3);
   vbox4->pack_start(*user_some_space);
   User->set_alignment(0.5,0.5);
   User->set_padding(0,0);
   User->set_justify(Gtk::JUSTIFY_LEFT);
   User->set_line_wrap(false);
   User->set_use_markup(false);
   User->set_selectable(false);
   card_area->pack_start(*opn_deck_area);
   card_area->pack_start(*comm_deck_area);
   card_area->pack_start(*owner_deck_area);
   hbox1->pack_start(*card_area);
   hbox1->pack_start(*fixed4);
   Network->set_alignment(0.5,0.5);
   Network->set_padding(0,0);
   Network->set_justify(Gtk::JUSTIFY_LEFT);
   Network->set_line_wrap(false);
   Network->set_use_markup(false);
   Network->set_selectable(false);
   notebook1->set_flags(Gtk::CAN_FOCUS);
   notebook1->set_show_tabs(true);
   notebook1->set_show_border(true);
   notebook1->set_tab_pos(Gtk::POS_TOP);
   notebook1->set_scrollable(false);
   notebook1->append_page(*option_area, *Option);
   notebook1->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook1->append_page(*vbox3, *Deck);
   notebook1->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook1->append_page(*vbox4, *User);
   notebook1->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook1->append_page(*hbox1, *Network);
   notebook1->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   vbox1->pack_start(*menubar1, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*notebook1);
   main->set_title(_("window1"));
   main->set_default_size(800,600);
   main->set_modal(false);
   main->property_window_position().set_value(Gtk::WIN_POS_NONE);
   main->set_resizable(true);
   main->property_destroy_with_parent().set_value(true);
   main->add(*vbox1);
   new1->show();
   open1->show();
   save1->show();
   save_as1->show();
   separatormenuitem1->show();
   quit1->show();
   menuitem1->show();
   cut1->show();
   copy1->show();
   paste1->show();
   delete1->show();
   menuitem2->show();
   menuitem3->show();
   about1->show();
   menuitem4->show();
   menubar1->show();
   option_area->show();
   Option->show();
   card_explain->show();
   deck_your->show();
   hbox2->show();
   deck_list->show();
   vbox3->show();
   Deck->show();
   user_info_space->show();
   user_deck_space->show();
   hbox3->show();
   user_some_space->show();
   vbox4->show();
   User->show();
   opn_deck_area->show();
   comm_deck_area->show();
   owner_deck_area->show();
   card_area->show();
   fixed4->show();
   hbox1->show();
   Network->show();
   notebook1->show();
   vbox1->show();
   main->show();
   new1->signal_activate().connect(SigC::slot(*this, &main_glade::on_new1_activate));
   open1->signal_activate().connect(SigC::slot(*this, &main_glade::on_open1_activate));
   save1->signal_activate().connect(SigC::slot(*this, &main_glade::on_save1_activate));
   save_as1->signal_activate().connect(SigC::slot(*this, &main_glade::on_save_as1_activate));
   quit1->signal_activate().connect(SigC::slot(*this, &main_glade::on_quit1_activate));
   cut1->signal_activate().connect(SigC::slot(*this, &main_glade::on_cut1_activate));
   copy1->signal_activate().connect(SigC::slot(*this, &main_glade::on_copy1_activate));
   paste1->signal_activate().connect(SigC::slot(*this, &main_glade::on_paste1_activate));
   delete1->signal_activate().connect(SigC::slot(*this, &main_glade::on_delete1_activate));
   about1->signal_activate().connect(SigC::slot(*this, &main_glade::on_about1_activate));
}

main_glade::~main_glade()
{  delete gmm_data;
}
